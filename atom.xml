<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hvnt3r&#39;s Blog</title>
  
  <subtitle>记录点滴,记录成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hvnt3r.github.io/"/>
  <updated>2018-09-05T03:23:34.856Z</updated>
  <id>https://hvnt3r.github.io/</id>
  
  <author>
    <name>Hvnt3r</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移说明</title>
    <link href="https://hvnt3r.github.io/2018/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/"/>
    <id>https://hvnt3r.github.io/2018/09/博客迁移说明/</id>
    <published>2018-09-05T03:06:10.000Z</published>
    <updated>2018-09-05T03:23:34.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客迁移说明"><a href="#博客迁移说明" class="headerlink" title="博客迁移说明"></a>博客迁移说明</h1><p>关于我写博客的历程，我最开始使用的是<code>CSDN</code>，优点是免费，易于维护，但是作为一个伪Geek，我还是很喜欢定制化的个性博客，于是我购买了一台腾讯云的主机用于搭建<code>WordPress</code>博客，在主题选择和插件的丰富上都做了不少的功夫，最终打造了一个页面美观大方功能齐全的个人博客，但是在日常使用过程中发现发布文章的过程十分繁琐而且没有一个良好的版本控制，什么时候博客崩了就什么都没有了，在这个知识就是金钱的时代我是必然要避免这种风险的，于是我选择了<code>Hexo+GithubPage</code>，静态的页面安全性高了很多，而且GitHubPage也是免费的，git也有版本控制，万一手贱点错了我还能找回之前的信息，所以选择了Hexo，目前这个站点上还没有很多的博客，不过我会慢慢的把存储在其他地方的博客迁移到这上面，敬请期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客迁移说明&quot;&gt;&lt;a href=&quot;#博客迁移说明&quot; class=&quot;headerlink&quot; title=&quot;博客迁移说明&quot;&gt;&lt;/a&gt;博客迁移说明&lt;/h1&gt;&lt;p&gt;关于我写博客的历程，我最开始使用的是&lt;code&gt;CSDN&lt;/code&gt;，优点是免费，易于维护，但是作为一个伪
      
    
    </summary>
    
      <category term="生活" scheme="https://hvnt3r.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://hvnt3r.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr_mistake</title>
    <link href="https://hvnt3r.github.io/2018/09/pwnable-kr-mistake/"/>
    <id>https://hvnt3r.github.io/2018/09/pwnable-kr-mistake/</id>
    <published>2018-09-04T15:56:50.000Z</published>
    <updated>2018-09-05T01:26:16.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwnable-kr-mistake"><a href="#pwnable-kr-mistake" class="headerlink" title="pwnable.kr_mistake"></a>pwnable.kr_mistake</h1><p><strong>题面：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">We all make mistakes, let&apos;s move on.</span><br><span class="line">(don&apos;t take this too seriously, no fancy hacking skill is required at all)</span><br><span class="line"></span><br><span class="line">This task is based on real event</span><br><span class="line">Thanks to dhmonkey</span><br><span class="line"></span><br><span class="line">hint : operator priority</span><br><span class="line"></span><br><span class="line">ssh mistake@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>提示这道题的要点是运算符的优先级</p><p>连上服务器后发现题目文件夹下有四个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mistake@ubuntu:~$ ls -l</span><br><span class="line">total 24</span><br><span class="line">-r-------- 1 mistake_pwn root      51 Jul 29  2014 flag</span><br><span class="line">-r-sr-x--- 1 mistake_pwn mistake 8934 Aug  1  2014 mistake</span><br><span class="line">-rw-r--r-- 1 root        root     792 Aug  1  2014 mistake.c</span><br><span class="line">-r-------- 1 mistake_pwn root      10 Jul 29  2014 password</span><br></pre></td></tr></table></figure><p>查看一下<code>mistake.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;                                               </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;                                               </span></span></span><br><span class="line">                                                                 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10                                                </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1                                                 </span></span><br><span class="line">                                                                 </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;                                      </span><br><span class="line">        <span class="keyword">int</span> i;                                                   </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;                                    </span><br><span class="line">                s[i] ^= XORKEY;                                  </span><br><span class="line">        &#125;                                                        </span><br><span class="line">&#125;                                                                </span><br><span class="line">                                                                 </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;                                </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">int</span> fd;                                                  </span><br><span class="line">        <span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);          </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">        &#125;                                                        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);                        </span><br><span class="line">        sleep(time(<span class="number">0</span>)%<span class="number">20</span>);                                       </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];                                   </span><br><span class="line">        <span class="keyword">int</span> len;                                                 </span><br><span class="line">        <span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;                   </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"read error\n"</span>);                          </span><br><span class="line">                close(fd);                                       </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">        &#125;                                                        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];                                  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"input password : "</span>);                             </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%10s"</span>, pw_buf2);                                  </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="comment">// xor your input                                        </span></span><br><span class="line">        xor(pw_buf2, <span class="number">10</span>);                                        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;                   </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);                         </span><br><span class="line">                system(<span class="string">"/bin/cat flag\n"</span>);                       </span><br><span class="line">        &#125;                                                        </span><br><span class="line">        <span class="keyword">else</span>&#123;                                                    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Wrong Password\n"</span>);                      </span><br><span class="line">        &#125;                                                        </span><br><span class="line">                                                                 </span><br><span class="line">        close(fd);                                               </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据题目的提示<code>运算符</code>我找一些代码中的关键点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123; </span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);          </span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>在这里由于<code>open()</code>的返回值不会小于0，且<code>&lt;</code>的优先级比<code>=</code>高，所以这句语句的结果是open()的返回值!&lt;0，所以<code>open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0</code>的值为false，因此赋值给fd的时候fd为0，此平台的第一题就是考察的<code>File descriptor</code>，当值为0时执行标准输入，因此实际上代码并不会读password文件，而是等待用户的输入，这就可以让我们来伪造password</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xor(pw_buf2, <span class="number">10</span>);                                        </span><br><span class="line">      <span class="comment">//对用户的输入xor                                                         </span></span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;     <span class="comment">//比较xor后的密码与“原”密码              </span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);                         </span><br><span class="line">              system(<span class="string">"/bin/cat flag\n"</span>);                       </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>因此我们只需要再fd赋值之后输入自己的10位密码，然后再输入xor后的密码，即可比对成功拿到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mistake@ubuntu:~$ ./mistake</span><br><span class="line"><span class="keyword">do</span> not bruteforce...</span><br><span class="line">1111111111</span><br><span class="line">input password : 0000000000</span><br><span class="line">Password OK</span><br><span class="line">Mommy, the operator priority always confuses me :(</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pwnable-kr-mistake&quot;&gt;&lt;a href=&quot;#pwnable-kr-mistake&quot; class=&quot;headerlink&quot; title=&quot;pwnable.kr_mistake&quot;&gt;&lt;/a&gt;pwnable.kr_mistake&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="CTF" scheme="https://hvnt3r.github.io/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://hvnt3r.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="https://hvnt3r.github.io/tags/PWN/"/>
    
  </entry>
  
</feed>
